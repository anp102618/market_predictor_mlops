name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "30 2 * * *"  # Daily at 8:00 AM IST
  workflow_dispatch:

env:
  DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
  DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  MLFLOW_TRACKING_URI: https://dagshub.com/${{ secrets.DAGSHUB_USERNAME }}/market_predictor_mlops.mlflow

jobs:

  ########################
  # 1. Train & Test Model
  ########################
  build-train-test:
    runs-on: ubuntu-latest
    outputs:
      promotion_status: ${{ steps.promotion.outputs.status }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r app_requirements.txt
          pip install -r requirements.txt || true
          pip install dvc[http] mlflow

      - name: Configure DVC Remote (DagsHub)
        run: |
          dvc remote add origin https://dagshub.com/${DAGSHUB_USERNAME}/market_predictor_mlops.dvc
          dvc remote modify origin user $DAGSHUB_USERNAME
          dvc remote modify origin password $DAGSHUB_TOKEN

      - name: Set MLflow to Use DagsHub
        run: |
          echo "MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}" >> $GITHUB_ENV
          export MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
          echo "MLflow tracking set to $MLFLOW_TRACKING_URI"

      - name: Run Model Training
        run: python main.py

      - name: Run Experiment Tracking (DagsHub MLflow)
        run: python src/Experiment_Tracking_Prediction.py

      - name: Track Artifacts with DVC & Push to DagsHub
        run: |
          dvc add Data/processed_data/final_data.csv
          dvc add Tuned_Model/model.joblib
          dvc add Tuned_Model/mlflow_details.yaml
          dvc add Tuned_Model/time_series_predictions.yaml

          git config --global user.name "anp102618"
          git config --global user.email "a.n.prasad155@gmail.com"
          git add .
          git commit -m "Auto: Tracked artifacts with DVC" || echo "No changes to commit"
          git push origin main
          dvc push

      - name: Run Model Promotion Test
        run: python -m unittest Test_Script/test.py

      - name: Check for Promotion Success
        id: promotion
        run: |
          if [ -f Test_Script/promotion_success.txt ]; then
            echo "status=YES" >> $GITHUB_OUTPUT
          else
            echo "status=NO" >> $GITHUB_OUTPUT
          fi

  ###############################
  # 2. Docker Build & Push (if promoted)
  ###############################
  docker-deploy:
    needs: build-train-test
    if: needs.build-train-test.outputs.promotion_status == 'YES'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t $DOCKERHUB_USERNAME/stock_prediction_app:latest .
          docker push $DOCKERHUB_USERNAME/stock_prediction_app:latest
